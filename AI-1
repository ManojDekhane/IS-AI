def dfs(graph, node, visited):
    if node not in visited:
        print(node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(graph, neighbour, visited)
    
    
graph = {
    'A' : ['B', 'C'],
    'B' : ['A', 'E', 'D'],
    'C' : ['F', 'G', 'A'],
    'D' : ['B'],
    'F' : ['C'],
    'G' : ['C'],
    'E' : ['B']
}

dfs(graph, 'B', set())




def bfs(graph, start):
    visited, queue = set(), [start]
    while (queue):
        vertex = queue.pop(0)
        if vertex not in visited:
            print(vertex)
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited


graph = {
    'A': {'B', 'C'},
    'B': {'A', 'E', 'D'},
    'C': {'F', 'G', 'A'},
    'D': {'B'},
    'E': {'B'},
    'F': {'C'},
    'G': {'C'}
}

bfs(graph, 'A')

